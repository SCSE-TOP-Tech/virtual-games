// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                 String    @id @default(cuid())
  user               User      @relation(fields: [userID], references: [userID])
  userID             String    @unique
  email              String    @unique
  password           String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([providerId, providerAccountId])
}

model Session {
  sessionID    String   @id @default(cuid())
  userID       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userID], references: [userID])
}

model User {
  userID    String    @id @default(cuid())
  name      String
  email     String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]

  state   State      @relation(fields: [stateID], references: [stateID])
  stateID Int
  timers  Timer[] // 1-M
  items   UserItem[] // 1-M
  guess   Guess? // 1-1
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Timer {
  timerID   Int      @id @default(autoincrement())
  user      User     @relation(fields: [userID], references: [userID])
  userID    String   @unique
  startTime DateTime @default(now())
  endTime   DateTime
  timeTaken Float
}

model Guess {
  guessID Int    @id @default(autoincrement())
  user    User   @relation(fields: [userID], references: [userID])
  userID  String @unique
  score   Float
}

model UserItem {
  userItemID  Int       @id @default(autoincrement())
  user        User      @relation(fields: [userID], references: [userID])
  userID      String
  stateItem   StateItem @relation(fields: [stateItemID], references: [stateItemID])
  stateItemID Int
  collected   Boolean
}

model State {
  stateID     Int         @id
  name        String
  currentTime DateTime
  users       User[]
  stateItems  StateItem[]
}

model StateItem {
  stateItemID Int        @id @default(autoincrement())
  state       State      @relation(fields: [stateID], references: [stateID])
  stateID     Int
  useritem    UserItem[]
  itemName    String
  roomName    String
}
