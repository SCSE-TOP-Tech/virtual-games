// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  accountID Int    @id @default(autoincrement())
  user      User   @relation(fields: [userID], references: [userID])
  userID    Int    @unique
  email     String @unique
  password  String
}

model User {
  userID  Int        @id @default(autoincrement())
  name    String
  state   State      @relation(fields: [stateID], references: [stateID])
  stateID Int
  timers  Timer[] // 1-M
  items   UserItem[] // 1-M
  guess   Guess? // 1-1
  Account Account? // 1-1
}

model Timer {
  timerID   Int      @id @default(autoincrement())
  user      User     @relation(fields: [userID], references: [userID])
  userID    Int      @unique
  startTime DateTime @default(now())
  endTime   DateTime
  timeTaken Float
}

model Guess {
  guessID Int   @id @default(autoincrement())
  user    User  @relation(fields: [userID], references: [userID])
  userID  Int   @unique
  score   Float
}

model UserItem {
  userItemID  Int       @id @default(autoincrement())
  user        User      @relation(fields: [userID], references: [userID])
  userID      Int
  stateItem   StateItem @relation(fields: [stateItemID], references: [stateItemID])
  stateItemID Int
  collected   Boolean
}

model State {
  stateID     Int         @id
  name        String
  currentTime DateTime
  users       User[]
  stateItems  StateItem[]
}

model StateItem {
  stateItemID Int        @id @default(autoincrement())
  state       State      @relation(fields: [stateID], references: [stateID])
  stateID     Int
  useritem    UserItem[]
  itemName    String
  roomName    String
}
