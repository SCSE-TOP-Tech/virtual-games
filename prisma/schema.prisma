generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  password String
  id       String @id @default(cuid())
  userId   String @unique
  username String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  name         String?
  stateID      Int
  id           String     @id @default(cuid())
  transitionID Int?       @default(0)
  account      Account?
  guess        Guess?
  timers       Timer[]
  state        State      @relation(fields: [stateID], references: [stateID])
  items        UserItem[]
}

model Timer {
  timerID   Int      @id @default(autoincrement())
  startTime DateTime @default(now())
  endTime   DateTime
  timeTaken Float
  stateID   Int
  userId    String
  state     State    @relation(fields: [stateID], references: [stateID])
  user      User     @relation(fields: [userId], references: [id])
}

model Guess {
  guessID Int    @id @default(autoincrement())
  score   Float
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])
}

model UserItem {
  userItemID  Int       @id @default(autoincrement())
  stateItemID Int
  collected   Boolean
  userId      String
  stateItem   StateItem @relation(fields: [stateItemID], references: [stateItemID])
  user        User      @relation(fields: [userId], references: [id])
}

model State {
  stateID     Int         @id
  name        String
  currentTime DateTime
  stateItems  StateItem[]
  timer       Timer[]
  users       User[]
}

model StateItem {
  stateItemID Int        @id @default(autoincrement())
  stateID     Int
  itemName    String
  roomName    String
  state       State      @relation(fields: [stateID], references: [stateID])
  useritem    UserItem[]
}
